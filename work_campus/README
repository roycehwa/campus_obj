
校园管理系统：

本系统采用两层菜单，主页面提供5项功能
1. 校区管理
2. 班级管理
3. 学员管理
4. 员工管理
5. 教师管理

其中选择1，2需要输入校区序号或者班级序号(系统会输出所有可供操作对象）。
3，4，5需要输入员工和老师工号（6位数+s/t，前三位为所属校区号，后三位为系统在实例化对象时分配，员工结尾加s教师结尾加t作为区分）。
系统不会提示员工教师或者学生序号，输入错误就无法进入下一层操作。

二级菜单： 校园管理提供8项功能，1:增设课程     2:开设班级     3:雇佣员工     4:发放工资     5:学生统计     6:员工列表     7:班级列表     8:开设分校
1. 增设课程，可以添加学校教授课程门类（如Python，Java等）。 注意：添加完成之后这些课程直接属于该校区教授范围，同时添加到课程总表中。其他学区要增加同类科目，可以在这里添加）
   比如校区 001添加了Java课程，002校区可以通过这个功能将Java设置成自己教授的课程，如果是新科目，则重新添加。
2. 开设班级，在本校区开设新班级：需要输入提供班级名称，同时在本校区的科目类型中选择（如果学校没有Python课程，就不能开设Python班级，要先添加Python课程）。然后需要按照系统
    提示分配授课老师（请注意，如果校区内没有教授Python的老师，开课就不会成功。 如何设置老师授课门类：主菜单 教师管理 - 设置老师教授课程）
3. 雇佣员工，输入姓名年龄和性别和工资（工资将被纪录，用于发放工资作为参照），系统将提示是否招收教师，如果选择否则输入职务并完成。如果选择是则招收对象的title属性将被设置为教师。
(教师对象需要设置教授课程门类，这个功能需要进入主菜单的教师管理功能之下 - 设置教授课程 功能实现设置）。
4. 发放工资，提供选择是向员工发放工资，或者教师，或者全体员工。
5,6 其中员工列表和学生统计比较简单，直接输出当前校区之下的员工和学生列表。
7. 班级列表：输入本校区所有开设班级
8. 开设新校区：可以从这里开设新校区（系统首次启动时会提示创建一个校区)

二级菜单： 班级管理，按照系统提示输入班级序号（六位数）进入班级：提供4项功能 1:学生列表---2:招收学生---3:学生转学---4:学生退学
1. 输出该班级学生列表
2. 招收学生：在此生成学生实例并支付学费（按照课程设定时的金额向学区账号转账，学生账户初始值100，000但如果设置课程单价过高，招收学生会出现付学费余额不足的状况），
   每个学生初始化时均有一个9位数序号，实例属性中设置了校区号（3位），班级号（6位）以及学号（9位）。
3. 转学：系统会提示可供转学的其他班级，选择后系统自动修改学生的校区，班级和学号，将学生从班级实例的学生列表中删除，添加到新班级当中。同时修改学生实例在学生存储文档
    Student.pk当中的位置。
4. 退学：输入退学学生序号，系统将把数据从所在班级的学生字典中删除，同时从Student.pk当中删除。

二级菜单：学员管理：输入学生学号进入
1. 学生打卡：系统将在学生打卡纪录（sign_in列表）当中添加当天日期。
2. 签到纪录：输出学生所有打卡纪录
3. 学生概况：输出学生所在校区，班级以及学号

二级菜单：员工管理 输入员工号（以s结尾的7位，如001001s）功能与学生基本相同

二级菜单：教师管理 输入教师工号（以t结尾的7位，如001012t）
1. 设置教师教授课程，系统提示目前学校所有提供的课程，选择后添加到教师属性Course当中，在为班级分配老师时必须该老师Course属性当中拥有相关课程，否则不能分配。

￥￥￥重要￥￥￥
系统若干功能有先后顺序，否则会出现无法实现的问题：

1. 开设学校
2. 添加科目  招收教师
3. 为教师设置教授科目
4. 开设班级 （系统提示分配教师，在这里分配科目匹配的教师）
5. 招收学员

本系统数据存储：
学校类 ==》 campus.pk dict 格式 {campus_index: campus_obj,....}
班级类 ==》 programs.pk dict 格式 { campus1_index: { program1_index: program1_obj, program2_index: program2_obj, ....},
                                  campus2_index: { .....} } campus是该课程所属校区, 3位序号， program_index为课程对象序号 6位
课程类 ==》 course.pk  dict 格式 { course_index: course_obj, .....} course_index为两位数
老师类 ==》 lecturer.pk dict 格式 { campus1_index: { lecturer1_index: lecturer1_obj, .....}, campus2_index:{.....}} 教师序号为六位数+t
员工类 ==》 staff.pk 格式与老师相同
学生类 ==》 student.pk dict 格式 { campus_indx: { program_index : { student_index : student_object, ........}}}